<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xmlns:aop="http://www.springframework.org/schema/aop"  
       xmlns:tx="http://www.springframework.org/schema/tx"  
       xmlns:util="http://www.springframework.org/schema/util"  
       xmlns:context="http://www.springframework.org/schema/context"  
       xsi:schemaLocation="  
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd  
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd  
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">  
    <!-- =========================================================  
         Shiro Components  
         ========================================================= -->  
  
  	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
	<bean id="myRealm" class="cn.com.hadon.security.shiro.ShiroRealm" />

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<!-- <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
	</bean> -->
  
  
    <!-- Shiro's main business-tier object for web-enabled applications  
         (use org.apache.shiro.web.mgt.DefaultWebSecurityManager instead when there is no web environment)-->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <!-- Single realm app (realm configured next, below).  If you have multiple realms, use the 'realms'  
      property instead. -->  
    <!--这里的sampleRealm需要我们自己实现，主要包括2个方法  
	1.  用户登录的验证（授权）  
	2.  用户具有的角色和权限（认证）  
	 且看下面介绍-->  
        <property name="realm" ref="myRealm"/>  
        <!-- Uncomment this next property if you want heterogenous session access or clusterable/distributable  
             sessions.  The default value is 'http' which uses the Servlet container's HttpSession as the underlying  
             Session implementation.  
        <property name="sessionMode" value="native"/> -->  
    </bean>  
  
   <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <property name="securityManager" ref="securityManager"/>  
        <property name="loginUrl" value="/page/login.jsp"/>  
        <property name="successUrl" value="/page/index.jsp"/>  
        <property name="unauthorizedUrl" value="/register/unauthorized"/>  
        <!-- The 'filters' property is usually not necessary unless performing an override, which we  
             want to do here (make authc point to a PassthruAuthenticationFilter instead of the  
             default FormAuthenticationFilter: -->  
        <property name="filters">  
            <util:map>  
                <entry key="authc">  
                    <bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>  
                </entry>  
            </util:map>  
        </property>  
        
        <property name="filterChainDefinitions">  
            <value>  
                /login.jsp = anon  
       			/*/*.do = anon
                <!-- /page/index.jsp = authc   
                /page/addItem* = authc,roles[数据管理员]  
                /page/file* = authc,roleOR[数据管理员,普通用户]  
                /page/listItems* = authc,roleOR[数据管理员,普通用户]  
                /page/showItem* = authc,roleOR[数据管理员,普通用户]  
                /page/updateItem*=authc,roles[数据管理员]   -->
            </value>  
        </property>  
    </bean>  
  	
   
  
</beans> 